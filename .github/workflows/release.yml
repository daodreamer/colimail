name: Release Build

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  release:
    strategy:
      fail-fast: false
      matrix:
        platform:
          - os: windows-latest
            rust_target: x86_64-pc-windows-msvc
          - os: macos-latest
            rust_target: aarch64-apple-darwin
          - os: ubuntu-latest
            rust_target: x86_64-unknown-linux-gnu

    runs-on: ${{ matrix.platform.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform.rust_target }}

      - name: Install macOS dependencies
        if: matrix.platform.os == 'macos-latest'
        run: |
          rustup target add aarch64-apple-darwin

      - name: Install Linux dependencies
        if: matrix.platform.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf libssl-dev

      - name: Install frontend dependencies
        run: npm install

      - name: Create .env file from secrets
        env:
          VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}
        run: |
          echo "VITE_SUPABASE_URL=$VITE_SUPABASE_URL" > .env
          echo "VITE_SUPABASE_ANON_KEY=$VITE_SUPABASE_ANON_KEY" >> .env
        shell: bash

      - name: Create OAuth2 credentials from secret
        env:
          OAUTH_CREDENTIALS_JSON: ${{ secrets.OAUTH_CREDENTIALS_JSON }}
        if: env.OAUTH_CREDENTIALS_JSON != ''
        run: echo "$OAUTH_CREDENTIALS_JSON" > src-tauri/oauth2_credentials.json
        shell: bash

      - name: Build Tauri app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        with:
          tagName: ${{ github.ref_name }}
          releaseName: 'Colimail ${{ github.ref_name }}'
          releaseBody: |
            See the assets below to download this version and install.

            ## Installation
            - **Windows**: Download `.msi` installer
            - **macOS Apple Silicon**: Download `.dmg` file
            - **Linux**: Download `.deb` or `.AppImage` file

            ## What's New
            Check the [changelog](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for details.
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.platform.os == 'macos-latest' && format('--target {0}', matrix.platform.rust_target) || '' }}
          tauriScript: npm run tauri

      - name: Upload artifacts (Windows)
        if: matrix.platform.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: colimail-${{ matrix.platform.os }}-${{ matrix.platform.rust_target }}
          path: src-tauri/target/release/bundle/**/*.msi

      - name: Upload artifacts (macOS)
        if: matrix.platform.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: colimail-${{ matrix.platform.os }}-${{ matrix.platform.rust_target }}
          path: src-tauri/target/aarch64-apple-darwin/release/bundle/dmg/*.dmg

      - name: Upload artifacts (Linux)
        if: matrix.platform.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: colimail-${{ matrix.platform.os }}-${{ matrix.platform.rust_target }}
          path: |
            src-tauri/target/release/bundle/deb/*.deb
            src-tauri/target/release/bundle/appimage/*.AppImage
